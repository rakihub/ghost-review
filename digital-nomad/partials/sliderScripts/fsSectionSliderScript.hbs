{{!-- Fullscreen section's tiers slider script --}}

<script>
    function initFeedbackSlider() {
        const tiersSliders = document.querySelectorAll(
            '.fs-section-tiers-slider-wrapper'
        );

        tiersSliders.forEach((slider) => {
            const tierSlides = slider.querySelectorAll('.fs-section-tiers-slide');

            const tierSlidesArr = Array.from(tierSlides);

            tierSlidesArr.findIndex((slide, index) => {
                const price = slide.querySelector(
                    '.tier-card__price-value.monthly'
                ).textContent;

                if (price === '0') {
                    tierSlidesArr.splice(index, 1);
                    tierSlidesArr.splice(tierSlidesArr.length, 0, slide);
                }
            });

            const highestSlide = tierSlidesArr.reduce((a, b) => {
                return a.offsetHeight > b.offsetHeight ? a : b;
            });

            tierSlidesArr.forEach((slide) => {
                slide.style.height = highestSlide.offsetHeight + 'px';
            });

            const tiersSliderHeight =
                highestSlide.offsetHeight + (tierSlides.length - 1) * 15;
            slider.style.height = tiersSliderHeight + 'px';

            const arrIndexes = [];

            let start = 0;
            while (tierSlidesArr.length > start) {
                arrIndexes.push(start++);
            }

            const setIndex = (arr) => {
                for (let i = 0; i < tierSlidesArr.length; i++) {
                    tierSlidesArr[i].dataset.slide = arr[i]; // Set indexes
                }
            };

            const next = () => {
                arrIndexes.unshift(arrIndexes.pop());
                setIndex(arrIndexes);
            };

            const prev = () => {
                arrIndexes.push(arrIndexes.shift());
                setIndex(arrIndexes);
            };

            document
                .querySelector('.fs-section-tiers-slider-next-btn')
                .addEventListener('click', next);
            document
                .querySelector('.fs-section-tiers-slider-prev-btn')
                .addEventListener('click', prev);

            if (window.innerWidth <= 1000) {
                function swipedetect(el, callback) {
                    var touchsurface = el,
                        swipedir,
                        startX,
                        startY,
                        distX,
                        distY,
                        threshold = 100, //required min distance traveled to be considered swipe
                        restraint = 300, // maximum distance allowed at the same time in perpendicular direction
                        allowedTime = 300, // maximum time allowed to travel that distance
                        elapsedTime,
                        startTime,
                        handleswipe = callback || function (swipedir) { };

                    touchsurface.addEventListener('touchstart', (e) => {
                        var touchobj = e.changedTouches[0];
                        swipedir = 'none';
                        dist = 0;
                        startX = touchobj.pageX;
                        startY = touchobj.pageY;
                        startTime = new Date().getTime(); // record time when finger first makes contact with surface
                    }, { passive: true });

                    touchsurface.addEventListener('touchend', (e) => {
                        var touchobj = e.changedTouches[0];
                        distX = touchobj.pageX - startX; // get horizontal dist traveled by finger while in contact with surface
                        distY = touchobj.pageY - startY; // get vertical dist traveled by finger while in contact with surface
                        elapsedTime = new Date().getTime() - startTime; // get time elapsed

                        if (elapsedTime <= allowedTime) {
                            // first condition for swipe met
                            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) {
                                // 2nd condition for horizontal swipe met
                                swipedir = distX < 0 ? 'left' : 'right'; // if dist traveled is negative, it indicates left swipe
                            }
                        }

                        handleswipe(swipedir);
                    });
                }

                swipedetect(slider, (swipedir) => {
                    if (swipedir === 'left') {
                        next();
                    }

                    if (swipedir === 'right') {
                        prev();
                    }
                });
            }

            setIndex(arrIndexes); // The first indexes addition
        });
    }

    initFeedbackSlider();
</script>